/**
 * @author Christian Damm, Sascha Kretzschmann
 * @desc Here we define our templates.
 */
module Car2X_Templates {
	import from Car2X_Functions {
		function f_bool2str, f_ignitionStatus2str, f_max, f_min;
	}

	import from Car2X_ModuleParameters {
		const
			c_ElmVehicleSpeed,
			c_FilterInterval1000,
			c_FilterInterval1500,
			c_FilterInterval500,
			c_doorStatus,
			c_engineSpeed,
			c_headlampStatus,
			c_ignitionStatus,
			c_modePrefix01,
			c_startRequest,
			c_steeringWheelAngle,
			c_stopRequest,
			c_transmissionGearPosition,
			c_vehicleSpeed;
	}
	import from Car2X_Types {
		type
			ElmRequest,
			ElmResponse,
			FilterRequest,
			FilterResponse,
			IgnitionStatus;
	}

	/**
	 * @desc Request template to communicate with ELM.
	 *   	currently not used
	 */
	template ElmRequest m_ElmVehicleSpeed() := {
		modePrefix := c_modePrefix01, parameterID := c_ElmVehicleSpeed
	}

	/**
	 * @desc Response template receiving from ELM.
	 *   	currently not used
	 */
	template ElmResponse mw_ElmVehicleSpeed() := {response := ?}

	/**
	 * @desc template to start vehicle speed request with intervall 1500
	 */
	template FilterRequest m_FilterVehicleSpeedStart() := {
		reqType := c_startRequest,
		reqData := {{key := c_vehicleSpeed, interval := c_FilterInterval1500}}
	}

	/**
	 * @desc template to stop vehicle speed request
	 */
	template FilterRequest m_FilterVehicleSpeedStop() := {
		reqType := c_stopRequest, reqData := {{key := c_vehicleSpeed}}
	}

	/**
	 * @desc template to start steering wheel request with interval 1000
	 */
	template FilterRequest m_FilterSteeringWheelStart() := {
		reqType := c_startRequest,
		reqData := {
			{key := c_steeringWheelAngle, interval := c_FilterInterval1000}
		}
	}

	/**
	 * @desc template to start door status request with interval 1000
	 */
	template FilterRequest m_FilterDoorStatusStart() := {
		reqType := c_startRequest,
		reqData := {{key := c_doorStatus, interval := c_FilterInterval1000}}
	}

	/**
	 * @desc template to stop door status request
	 */
	template FilterRequest m_FilterDoorStatusStop() := {
		reqType := c_stopRequest, reqData := {{key := c_doorStatus}}
	}

	/**
	 * @desc template to start transmission gear request with interval 1000
	 */
	template FilterRequest m_FilterTransmissionGearStart() := {
		reqType := c_startRequest,
		reqData := {
			{
				key := c_transmissionGearPosition,
				interval := c_FilterInterval1000
			}
		}
	}

	/**
	 * @desc template to stop steering wheel request with interval 1000
	 */
	template FilterRequest m_FilterTransmissionGearStop() := {
		reqType := c_stopRequest,
		reqData := {{key := c_transmissionGearPosition}}
	}

	/**
	 * @desc template to start head lamp request with interval 1000
	 */
	template FilterRequest m_FilterHeadLampStatusStart() := {
		reqType := c_startRequest,
		reqData := {{key := c_headlampStatus, interval := c_FilterInterval1000}}
	}

	/**
	 * @desc template to stop head lamp request
	 */
	template FilterRequest m_FilterHeadLampStatusStop() := {
		reqType := c_stopRequest, reqData := {{key := c_headlampStatus}}
	}

	/**
	 * @desc template to start ingnition status request with intervall 500
	 */
	template FilterRequest m_FilterIgnitionStateStart() := {
		reqType := c_startRequest,
		reqData := {{key := c_ignitionStatus, interval := c_FilterInterval500}}
	}

	/**
	 * @desc template to stop steering wheel request
	 */
	template FilterRequest m_FilterSteeringWheelStop() := {
		reqType := c_stopRequest, reqData := {{key := c_steeringWheelAngle}}
	}

	/**
	 * @desc template to stop ignition status request
	 */
	template FilterRequest m_FilterIgnitionStateStop() := {
		reqType := c_stopRequest, reqData := {{key := c_ignitionStatus}}
	}

	/**
	 * @desc template to start engine speed request with intervall 500
	 */
	template FilterRequest m_FilterEngineSpeedStart() := {
		reqType := c_startRequest,
		reqData := {{key := c_engineSpeed, interval := c_FilterInterval500}}
	}

	/**
	 * @desc template to stop engine speed request
	 */
	template FilterRequest m_FilterEngineSpeedStop() := {
		reqType := c_stopRequest, reqData := {{key := c_engineSpeed}}
	}


	/**
	 * @desc template for steering wheel angle response
	 */
	template FilterResponse mw_FilterResponseSteeringWheel() := {
		OpenXCKey := c_steeringWheelAngle,
		OBD2Key := ?,
		valueA := ?,
		respTimestamp := ?
	}

	/**
	 * @desc template for door status reponse
	 */
	template FilterResponse mw_FilterResponseDoorStatus() := {
		OpenXCKey := c_doorStatus, OBD2Key := ?, valueA := ?, respTimestamp := ?
	}

	/**
	 * @desc template for transmission gear reponse
	 */
	template FilterResponse mw_FilterResponseTransmissionGear() := {
		OpenXCKey := c_transmissionGearPosition,
		OBD2Key := ?,
		valueA := ?,
		respTimestamp := ?
	}

	// TODO: add detailed comment
	/**
	 * @desc function is used to define an interval; f_max and f_min are custom
	 *   defined function to get the max and the min value; in ttcn3 intervals
	 *   are defined as (1..3) or (2.4..5.6)
	 * @param p_middle midle value of the interval
	 * @param p_variance variance around the middle value
	 * @param p_min optional paramter; minimum value
	 * @param p_ax optional paramter; maximum value
	 */
	template float interval(float p_middle, float p_variance,
							float p_min := - infinity, float p_max := infinity)
		:=
		(f_max(p_middle - p_variance, p_min) ..
		 f_min(p_middle + p_variance, p_max));

	/**
	 * @desc template for ignition status response
	 */
	template FilterResponse mw_FilterResponseIgnitionStatus(IgnitionStatus
																status) := {
		OpenXCKey := c_ignitionStatus,
		OBD2Key := ?,
		valueA := f_ignitionStatus2str(status),
		respTimestamp := ?
	}

	/**
	 * @desc template for vehicle Speed response
	 */
	template FilterResponse mw_FilterResponseVehicleSpeed() := {
		OpenXCKey := c_vehicleSpeed,
		OBD2Key := c_ElmVehicleSpeed,
		valueA := ?,
		respTimestamp := ?
	}
	with {
		encode "str2float";
	}

	/**
	 * @desc template for engine speed response
	 */
	template FilterResponse mw_FilterResponseEngineSpeed() := {
		OpenXCKey := c_engineSpeed,
		OBD2Key := ?,
		valueA := ?,
		respTimestamp := ?
	}

	/**
	 * @desc template for head lamp status response
	 */
	template FilterResponse mw_FilterResponseHeadLampStatus(boolean p_Status) :=
	{
		OpenXCKey := c_headlampStatus,
		OBD2Key := ?,
		valueA := f_bool2str(p_Status),
		respTimestamp := ?
	}
}
with {
	encode "json";
}