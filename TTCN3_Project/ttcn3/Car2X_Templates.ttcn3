/**
 * @author Christian Damm, Sascha Kretzschmann
 * @desc Here we define our templates.
 */
module Car2X_Templates {
	

	import from Car2X_Functions {
		function f_bool2str, f_ignitionStatus2str, f_max, f_min;
	}

	import from Car2X_ModuleParameters {
		const
			c_doorStatus,
			c_engineSpeed,
			c_headlampStatus,
			c_ignitionStatus,
			c_modePrefix_01,
			c_startRequest,
			c_steeringWheelAngle,
			c_stopRequest,
			c_transmissionGearPosition,
			c_vehicleSpeed;
	}
	import from Car2X_Types {
		type
			ElmRequest,
			ElmResponse,
			FilterRequest,
			FilterResponse,
			IgnitionStatus;
	}

	/**
	 * @desc Request template to communicate with ELM.
	 * 	currently not used
	 */
	template ElmRequest m_ElmVehicleSpeed() := {
		modePrefix := c_modePrefix_01, parameterID := "0D"
	}

	/**
	 * @desc Response template receiving from ELM.
	 * 	currently not used
	 */
	template ElmResponse mw_ElmVehicleSpeed() := {response := ?}

	/**
	 * 
	 * @desc TODO: remove headlamp status 
	 * TODO: use start constant
	 */
	template FilterRequest m_FilterVehicleSpeedStart() := {
		reqType := c_startRequest,
		reqData := {{key := c_vehicleSpeed, interval := 1500}}
	}

	template FilterRequest m_FilterVehicleSpeedStop() := {
		reqType := c_stopRequest,
		reqData := {{key := c_vehicleSpeed}}
	}

	template FilterRequest m_FilterSteeringWheelStart() := {
		reqType := c_startRequest,
		reqData := {{key := c_steeringWheelAngle, interval := 1000}}
	}

	template FilterRequest m_FilterDoorStatusStart() := {
		reqType := c_startRequest,
		reqData := {{key := c_doorStatus, interval := 1000}}
	}

	template FilterRequest m_FilterDoorStatusStop() := {
		reqType := c_stopRequest, reqData := {{key := c_doorStatus, interval := 1000}}
	}

	template FilterRequest m_FilterTransmissionGearStart() := {
		reqType := c_startRequest,
		reqData := {{key := c_transmissionGearPosition, interval := 1000}}
	}

	template FilterRequest m_FilterTransmissionGearStop() := {
		reqType := c_stopRequest,
		reqData := {{key := c_transmissionGearPosition, interval := 1000}}
	}


	template FilterRequest m_FilterHeadLampStatusStart() := {
		reqType := c_startRequest,
		reqData := {{key := c_headlampStatus, interval := 1000}}
	}

	template FilterRequest m_FilterHeadLampStatusStop() := {
		reqType := c_stopRequest,
		reqData := {{key := c_headlampStatus, interval := 1000}}
	}

	template FilterRequest m_FilterIgnitionStateStart() := {
		reqType := c_startRequest,
		reqData := {{key := c_ignitionStatus, interval := 500}}
	}

	template FilterRequest m_FilterSteeringWheelStop() := {
		reqType := c_stopRequest, reqData := {{key := c_steeringWheelAngle}}
	}

	template FilterRequest m_FilterIgnitionStateStop() := {
		reqType := c_stopRequest, reqData := {{key := c_ignitionStatus}}
	}

	template FilterRequest m_FilterEngineSpeedStart() := {
		reqType := c_startRequest,
		reqData := {{key := c_engineSpeed, interval := 500}}
	}

	template FilterRequest m_FilterEngineSpeedStop() := {
		reqType := c_stopRequest, reqData := {{key := c_engineSpeed}}
	}


	//TODO:  no abbreviation

	/**
	 * @desc template for steering wheel angle response
	 */
	template FilterResponse mw_FilterResponseSteeringWheel() := {
		OpenXCKey := c_steeringWheelAngle,
		OBD2Key := ?,
		valueA := ?,
		respTimestamp := ?
	}

	/**
	 * @desc template for door status reponse
	 */
	template FilterResponse mw_FilterResponseDoorStatus() := {
		OpenXCKey := c_doorStatus,
		OBD2Key := ?,
		valueA := ?,
		respTimestamp := ?
	}

	/**
	 * @desc template for transmission gear reponse
	 */
	template FilterResponse mw_FilterResponseTransmissionGear() := {
		OpenXCKey := c_transmissionGearPosition,
		OBD2Key := ?,
		valueA := ?,
		respTimestamp := ?
	}

	//TODO: add detailed comment
	template float interval(float p_middle, float p_variance, float p_min := -infinity, float p_max := infinity):=
//	(3..5);
		(f_max(p_middle-p_variance,p_min)..f_min(p_middle+p_variance,p_max));
	
	

	/**
	 * @desc template for ignition status response
	 */
	template FilterResponse mw_FilterResponseIgnitionStatus(IgnitionStatus status) := {
		OpenXCKey := c_ignitionStatus,
		OBD2Key := ?,
		valueA := f_ignitionStatus2str(status),
		respTimestamp := ?
	}
	
//	template FilterResponse mw_Filter_Response_iS_run() modifies mw_Filter_Response_iS := {
//		valueA := f_ignitionStatus2str(e_run)
//	}
//	
//	template FilterResponse mw_Filter_Response_iS_off() modifies mw_Filter_Response_iS := {
//			valueA := f_ignitionStatus2str(e_off)
//	}
//
//	template FilterResponse mw_Filter_Response_iS_accessory() modifies mw_Filter_Response_iS := {
//			valueA := f_ignitionStatus2str(e_accessory)
//	}
	
	/**
	 * @desc template for vehicle Speed response
	 */
	template FilterResponse mw_FilterResponseVehicleSpeed() := {
		OpenXCKey := c_vehicleSpeed,
		OBD2Key := "0D",
		valueA := ?,
		respTimestamp := ?
	}with{encode "str2float"}

	/**
	 * @desc template for engine speed response
	 */
	template FilterResponse mw_FilterResponseEngineSpeed() := {
		OpenXCKey := c_vehicleSpeed,
		OBD2Key := "0D",
		valueA := ?,
		respTimestamp := ?
	}

	 /**
	  * 
	  * @desc template for head lamp status response 
	  */
	template FilterResponse mw_FilterResponseHeadLampStatus(boolean p_Status) := {
		OpenXCKey := c_headlampStatus,
		OBD2Key := ?,
		valueA := f_bool2str(p_Status),
		respTimestamp := ?
	}
}
with {
	encode "json";
}