/**
 * @author Christian Damm, Sascha Kretzschmann
 * @desc Some simple test cases to start with.
 * @remark This class needs to be extended sophistically.
 */
module Car2X_Testcases {
	import from Car2X_ModuleParameters all;

	import from Car2X_Types {type DoorStatus, IgnitionStatus, TransmissionGear;}

	import from Car2X_ConfigSystem {
		type SystemComponentType, TesterComponentType;
	}

	import from Car2X_Functions {
		function
			f_ACCELERATOR_PEDAL,
			f_DOOR_STATUS,
			f_ENGINE_SPEED,
			f_HEADLAMP_STATUS,
			f_IGNITION_STATUS,
			f_STEERING_WHEEL_ANGLE,
			f_TRANSMISSION_GEAR_STATUS,
			f_VEHICLE_SPEED,
			f_setUp,
			f_setVerdictAndStage,
			f_tearDown;
	}


	/**
	 * @desc Checks that the vehicle speed is greater 50km/h.
	 * @verdict pass Successfully received vehicle speed.
	 * @verdict fail Not received anything.
	 * @verdict inconclusive Timer ran out.
	 */
	testcase TC_VEHICLE_SPEED_OVER_50_10_SEC()
		runs on TesterComponentType system SystemComponentType {
		var verdicttype v_ret := inconc;

		var float v_timerValue := 10.0;

		// set up configuration
		f_setUp();

		// start value request for TC
		t_TC_Global.start(v_timerValue);

		// send stage information
		action("stage:" & int2str(v_stage) & ",timeWindow:" &
			   int2str(float2int(v_timerValue)));

		// loop to check if speed is over 50 the whole time
		while (t_TC_Global.running) {
			// test body
			v_ret := f_VEHICLE_SPEED(50.0, 10.0, 5.0, 2.0);
		}

		// stop value request
		setverdict(v_ret);

		// tear down configuration
		f_tearDown();
	}

	/**
	 * @desc For these Testcase, the tester should start the engine and turn up
	 *   the engine rotation
	 */
	testcase TC_ENGINE_ROTATION_SPEED()
		runs on TesterComponentType system SystemComponentType {
		var verdicttype v_ret := inconc;
		var float v_timerValue := 10.0;
		// set up configuration
		f_setUp();

		// send stage information
		action("stage:" & int2str(v_stage) & ",timeWindow:" &
			   int2str(float2int(v_timerValue)));

		// executing stage 1 - start engine
		v_ret := f_IGNITION_STATUS(e_start);
		f_setVerdictAndStage(v_ret, v_stage, v_timerValue);

		// executing stage 2 - change to gear neutral
		v_ret := f_TRANSMISSION_GEAR_STATUS(e_neutral, c_timerTenSeconds);
		f_setVerdictAndStage(v_ret, v_stage, v_timerValue);

		// 	executing stage 3 - speed up engine
		v_ret :=
			f_ENGINE_SPEED(c_engineSpeed2500, c_timerOneSecond,
						   c_engineSpeedVar100, c_timerThirtySeconds);
		f_setVerdictAndStage(v_ret, v_stage, v_timerValue);

		// 	executing stage 4 - release gas pedal
		v_ret :=
			f_ACCELERATOR_PEDAL(c_acceleratorPedalMin, c_timerOneSecond,
								c_acceleratorVariance05Percent,
								c_timerTenSeconds);

		setverdict(v_ret);

		// tear down configuration
		f_tearDown();
	}

	/**
	 * @desc Simulated test case; no conection to canfilter;
	 * @verdict
	 */
	testcase TC_VEHICLE_SPEED_SIMULATED()
		runs on TesterComponentType system SystemComponentType {
		var verdicttype v_ret := pass;

		var float v_timerValue := 5.0;

		// set up configuration
		f_setUp();
		action("stage:" & int2str(v_stage) & ",timeWindow:" &
			   int2str(float2int(v_timerValue)));

		t_TC_Global.start(v_timerValue);

		while (t_TC_Global.running) {}
		v_stage := 2;
		action("stage:" & int2str(v_stage) & ",timeWindow:" &
			   int2str(float2int(v_timerValue)));
		// 		setverdict(inconc);
		// 		stop;
		t_TC_Global.start(v_timerValue);

		while (t_TC_Global.running) {}
		setverdict(v_ret);
	}

	/**
	 * @desc For these testcase to driver should speed up to over 50 and then
	 *   open the driver door.
	 * @verdict
	 */
	testcase TC_OPEN_DOOR_AT_SPEED_50()
		runs on TesterComponentType system SystemComponentType {
		var verdicttype v_ret := inconc;
		var float v_timerValue := 10.0;
		// set up configuration
		f_setUp();

		// send stage information
		action("stage:" & int2str(v_stage) & ",timeWindow:" &
			   int2str(float2int(v_timerValue)));

		// executing stage 1 - start engine
		v_ret := f_IGNITION_STATUS(e_start);
		f_setVerdictAndStage(v_ret, v_stage, v_timerValue);

		// executing stage 2 - speed up o 50
		v_ret := f_VEHICLE_SPEED(50.0, 1.0, 2.0, 1.0);
		f_setVerdictAndStage(v_ret, v_stage, v_timerValue);

		// 	executing stage 3 - open driver door
		v_ret := f_DOOR_STATUS(e_driver, true, 1.0);
		f_setVerdictAndStage(v_ret, v_stage, v_timerValue);

		// 	executing stage 4 - close driver door
		v_ret := f_DOOR_STATUS(e_driver, false, 1.0);

		setverdict(v_ret);

		// tear down configuration
		f_tearDown();
	}

	testcase TC_HEADLAMP_STATUS()
		runs on TesterComponentType system SystemComponentType {
		var verdicttype v_ret := inconc;
		var float v_timerValue := 10.0;

		// set up configuration
		f_setUp();
		// send stage information
		action("stage:" & int2str(v_stage) & ",timeWindow:" &
			   int2str(float2int(v_timerValue)));

		// executing stage 1 - engine to start
		v_ret := f_IGNITION_STATUS(e_run);
		f_setVerdictAndStage(v_ret, v_stage, v_timerValue);

		// executing stage 2 - turn off head lamp (optional)
		v_ret := f_HEADLAMP_STATUS(false, 10.0);
		f_setVerdictAndStage(v_ret, v_stage, v_timerValue);

		// executing stage 3 - turn on head lamp
		v_ret := f_HEADLAMP_STATUS(true, 10.0);
		f_setVerdictAndStage(v_ret, v_stage, v_timerValue);

		// executing stage 4 - turn off head lamp
		v_ret := f_HEADLAMP_STATUS(false, 10.0);

		setverdict(v_ret);
		// tear down configuration
		f_tearDown();
	}

	testcase TC_IGNITION_STATE_DUMMY()
		runs on TesterComponentType system SystemComponentType {
		var verdicttype v_ret := inconc;
		var float v_timerValue := 10.0;

		// set up configuration
		f_setUp();

		// send stage information
		action("stage:" & int2str(v_stage) & ",timeWindow:" &
			   int2str(float2int(v_timerValue)));

		// 		executing stage 1
		v_ret := f_IGNITION_STATUS(e_accessory);

		setverdict(v_ret);
		// tear down configuration
		f_tearDown();
	}

	/**
	 * @desc For this testcase, the stering wheel must turn most left, most
	 *   right and to the middle
	 * @verdict
	 */
	testcase TC_STEERING_WHEEL_ANGLE()
		runs on TesterComponentType system SystemComponentType {
		var verdicttype v_ret := inconc;
		var float v_timerValue := 10.0;

		// set up configuration
		f_setUp();

		// send stage information
		action("stage:" & int2str(v_stage) & ",timeWindow:" &
			   int2str(float2int(v_timerValue)));

		// executing stage 1
		v_ret := f_IGNITION_STATUS(e_accessory);
		f_setVerdictAndStage(v_ret, v_stage, v_timerValue);

		// executing stage 2
		v_ret := f_STEERING_WHEEL_ANGLE(c_steeringWheelMin, c_steeringWheelVariance50, c_timerTenSeconds);
		f_setVerdictAndStage(v_ret, v_stage, v_timerValue);

		// 	executing stage 3
		v_ret := f_STEERING_WHEEL_ANGLE(c_steeringWheelMax, c_steeringWheelVariance50, c_timerTenSeconds);
		f_setVerdictAndStage(v_ret, v_stage, v_timerValue);

		// 	executing stage 4
		v_ret := f_STEERING_WHEEL_ANGLE(c_steeringWheel0, c_steeringWheelVariance50, c_timerTenSeconds);

		setverdict(v_ret);
		// tear down configuration
		f_tearDown();
	}
}