/**
 * @author Sascha Kretzschmann
 * @desc This module provides function for each test case.
 *   		 Additionally this module provide set up and
 *   		 tear down configurations to reuse.
 */
module Car2X_Functions {
	import from Car2X_Types {type FilterResponse, IgnitionStatus;}

	import from Car2X_Templates {
		template
			m_Filter_ignitionState_Start,
			m_Filter_ignitionState_Stop,
			m_Filter_steeringWheel_Start,
			m_Filter_steeringWheel_Stop,
			mw_Filter_Response_iS,
			mw_Filter_Response_sW,
			mw_Filter_Response_vS;
	}

	import from Car2X_ConfigSystem {type TesterComponentType;}

	/**
	 * @desc Testbody function for
	 * @see Car2X_Testcases.TC_VEHICLE_SPEED_OVER_50
	 * @verdict pass The given speed ist greater than 50.0.
	 * @verdict fail Due to invalid parameter.
	 * @verdict inconc Due to a timeout.
	 */
	function f_TP_VEHICLE_SPEED_OVER_50_10_SEC(float p_waiting_time)
		runs on TesterComponentType return verdicttype  {
		var template FilterResponse v_speed;
		var verdicttype v_ret := pass;

		// start the timer
		t_TC.start(p_waiting_time);
		alt {
			// store received template into value
			[] filterPort.receive(mw_Filter_Response_vS) -> value v_speed {
				t_TC.stop;
				// check whether vehicle speed is greater than 50.0
				if (v_speed.valueA.floatValue > 50.0) {
					v_ret := pass;
				} else {
					v_ret := fail;
				}
			}
			[] filterPort.receive {
				t_TC.stop;
				v_ret := fail;
			}
			[] t_TC.timeout {
				v_ret := inconc;
			}
		}
		return (v_ret);
	}
	
	function f_TP_STEERING_WHEEL_ANGLE(float targetAngle, float variance)
	runs on TesterComponentType return verdicttype{
		var verdicttype v_ret := pass;
		t_TC_Global.start;
		while (t_TC_Global.running) {
			v_ret := f_TP_STEERING_WHEEL_ANGLE_SUB(- 600.0, 50.0, 2.0);
			if (v_ret == pass) {
				t_TC_Global.stop;
			}
		}				
		if(v_ret != pass){
			setverdict(v_ret);
			f_tearDown();
		}
		return v_ret;
	}

	function f_TP_STEERING_WHEEL_ANGLE_SUB(float targetAngle, float variance, float interval)
		runs on TesterComponentType return verdicttype  {
			var template FilterResponse v_angle;
			var verdicttype v_ret := pass;
			
			//start steering Wheel request
			filterPort.send(m_Filter_steeringWheel_Start);
			
			t_TC.start(interval);
			
			alt {
				[] filterPort.receive(mw_Filter_Response_sW)-> value v_angle {
					if(max(targetAngle-variance,-600.0) <= v_angle.valueA.floatValue and
					 v_angle.valueA.floatValue <= min(targetAngle+variance,600.0)){
						v_ret := pass;
						t_TC.stop;
					}else {
						v_ret := fail;
						t_TC.stop;
					}					
				}
				[] filterPort.receive {
					v_ret := fail;
					t_TC.stop;					
				}		
				[] t_TC.timeout{
					v_ret := inconc;
				}
			};
			
			//stop steering wheel request
			filterPort.send(m_Filter_steeringWheel_Stop);
			
			return v_ret;
		}


	function f_IGNITION_STATUS(IgnitionStatus ignitionStatus)
		runs on TesterComponentType return verdicttype{
			
		var verdicttype v_ret := pass;
		t_TC_Global.start;
		while (t_TC_Global.running) {
			v_ret := f_IGNITION_STATUS_SUB(ignitionStatus, 0.5);
			if (v_ret == pass) {
				t_TC_Global.stop;
			}
		}		
		return v_ret;
	}

	function f_IGNITION_STATUS_SUB(IgnitionStatus ignitionStatus, float interval)
		runs on TesterComponentType return verdicttype{
			
		var template FilterResponse v_ignitionStatus;
		var verdicttype v_ret := pass;

		//start ignition status request
		filterPort.send(m_Filter_ignitionState_Start);
			
		t_TC.start(interval);
		
		alt {
			// store received template into value
			[] filterPort.receive(mw_Filter_Response_iS) -> value v_ignitionStatus {
				if(ignitionStatus2str(ignitionStatus) == v_ignitionStatus.valueA.stringValue){
					v_ret := pass;
				} else {
					v_ret := fail;
				}
				t_TC.stop;
			}
			[] filterPort.receive {
				t_TC.stop;
				v_ret := fail;
			}
			[] t_TC.timeout {
				v_ret := inconc;
			}
		}
		

		//stop ignition status request
		filterPort.send(m_Filter_ignitionState_Stop);
		
		return v_ret;
	}

	/**
	 * @desc Set up the configuration for test cases running on
	 * @see Car2X_ConfigSystem.TesterComponentType.
	 *   		 Maps the port of the tester to the system port.
	 */
	function f_setUp() runs on TesterComponentType  {

		// create an instance of the tester
		var TesterComponentType Tester;
		Tester := TesterComponentType.create;

		// map the tester port to the system port
		map(self:filterPort, system:filterPort);
	}
	
	function max(float valueA, float valueB) return float{
		if(valueA > valueB){
			return valueA;
		}else{
			return valueB;
		}
	}
	
	function min(float valueA, float valueB) return float{
		if(valueA < valueB){
			return valueA;
		}else{
			return valueB;
		}
	}
	
	/**
	 * 
	 * @desc Auxiliary function to cast the ignitionStatus to charstring.
	 * 		 We cannot compare an enum type with a charstring that is
	 * 		 needed for the function @see f_ignitionStatus_SUB
	 * @param ignitionStatus 
	 * @return charstring Ignition status as string
	 */
	function ignitionStatus2str(IgnitionStatus ignitionStatus) return charstring{
		select(ignitionStatus){
			case(e_off){return "off"}
			case(e_accessory){return "accessory"}
			case(e_run){return "run"}
			case(e_start){return "start"}
		}			
	}
	
	/**
	 * 
	 * @desc Function to set the verdict and communicate via the action statment with TTman.
	 * 		 Furthermore, increment the stage for the test case.
	 * @param verdict Verdicttype for the given stage.
	 * @param stage Stage Current stage.
	 * @return integer The new stage.
	 */
	function f_set_verdict_and_stage(verdicttype verdict, integer stage) return integer{
		setverdict(verdict);
		stage := stage + 1;
		// send stage information
		action("stage:" & int2str(stage));
		return stage;
	}

	/**
	 * @desc Tear down the configuration for test cases running on
	 * @see Car2X_ConfigSystem.TesterComponentType.
	 *   		 UnMaps the ports.
	 */
	function f_tearDown() runs on TesterComponentType  {
		unmap(self:filterPort, system:filterPort);
		stop;
	}
	
}